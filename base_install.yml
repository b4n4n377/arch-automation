---
- hosts: all

  vars_prompt:
    - name: luks_passphrase
      prompt: "Enter a passphrase for hard disk encryption"
      private: yes

    - name: user_name
      prompt: "Enter your linux user name"
      private: no

    - name: user_password
      prompt: "Enter your linux password"
      private: yes

  tasks:
    ### Abort if the host is not booted from the Arch install media
    - name: Abort if the host is not booted from the Arch install media
      fail:
        msg: "This host is not booted from the Arch install media!"
      when: ansible_nodename != 'archiso'
      tags:
        - quick_exit

    ### Synchronize clock via NTP
    - name: Synchronize clock via NTP
      command: timedatectl set-ntp true
      tags:
        - sync_clock

    ### Repartition install drive
    - name: Repartition install drive
      block:
        - name: Wipe install drive and all its partitions
          command: find /dev -wholename "{{ install_drive }}*" -exec wipefs --force --all {} \;
          tags:
            - wipefs
        - name: Create boot partition
          parted:
            device: "{{ install_drive }}"
            label: gpt
            number: 1
            part_end: 250MB
            name: boot
            flags: [boot, esp]
            state: present
        - name: Create root partition
          parted:
            device: "{{ install_drive }}"
            label: gpt
            number: 2
            part_start: 250MB
            name: root
            flags: []
            state: present
      tags:
        - repartition

    ### Setup LUKS encryption for root filesystem
    - name: Setup LUKS encryption for root filesystem
      block:
        - name: Destroy existing LUKS volume
          luks_device:
            device: "{{ install_drive }}{{ root_partition_suffix }}"
            state: absent
        - name: Create and open LUKS volume
          luks_device:
            device: "{{ install_drive }}{{ root_partition_suffix }}"
            passphrase: "{{ luks_passphrase }}"
            name: root
            state: opened
        - name: Get UUID for root LUKS volume
          command: blkid -s UUID -o value '{{ install_drive }}{{ root_partition_suffix }}'
          register: root_luks_uuid
          changed_when: false
      tags:
        - luks

    ### Create files systems
    - name: Create filesystems
      block:
        - name: Create FAT32 filesystem in boot partition
          filesystem:
            dev: "{{ install_drive }}{{ boot_partition_suffix }}"
            fstype: vfat
            opts: -F32
            force: yes
        - name: Create btrfs filesystem in root volume
          filesystem:
            dev: /dev/mapper/root
            fstype: btrfs
            force: yes
        - name: Get UUID for boot filesystem
          command: blkid -s UUID -o value '{{ install_drive }}{{ boot_partition_suffix }}'
          register: boot_uuid
          changed_when: false
        - name: Get UUID for root filesystem
          command: blkid -s UUID -o value /dev/mapper/root
          register: root_uuid
          changed_when: false
      tags:
        - create_filesystems

    ### Create subvolumes and mount filesystems
    - name: Create subvolumes and mount filesystems
      block:
        - name: Mount root filesystem
          mount:
            path: /mnt
            src: UUID={{ root_uuid.stdout }}
            fstype: btrfs
            state: mounted
        - name: Create BTRFS subvolume @
          command: btrfs sub create /mnt/@
          changed_when: false
        - name: Create BTRFS subvolume @home
          command: btrfs sub create /mnt/@home
          changed_when: false
        - name: Create BTRFS subvolume @pkg
          command: btrfs sub create /mnt/@pkg
          changed_when: false
        - name: Create BTRFS subvolume @snapshots
          command: btrfs sub create /mnt/@snapshots
          changed_when: false
        - name: Unmount root filesystem
          mount:
            path: /mnt
            state: unmounted
        - name: Mount BTRFS subvolume @
          mount:
            path: /mnt
            src: UUID={{ root_uuid.stdout }}
            opts: noatime,compress=lzo,space_cache,ssd,subvol=@
            fstype: btrfs
            state: mounted
        - name: Create boot directory
          file:
            path: /mnt/boot
            state: directory
            mode: "0755"
        - name: Create home directory
          file:
            path: /mnt/home
            state: directory
            mode: "0755"
        - name: Create pacman-cache directory
          file:
            path: /mnt/var/cache/pacman/pkg
            state: directory
            mode: "0755"
        - name: Create snapshot directory
          file:
            path: /mnt/.snapshots
            state: directory
            mode: "0755"
        - name: Create BTRFS directory
          file:
            path: /mnt/btrfs
            state: directory
            mode: "0755"
        - name: Mount boot filesystem
          mount:
            path: /mnt/boot
            src: UUID={{ boot_uuid.stdout }}
            fstype: vfat
            state: mounted
        - name: Mount BTRFS subvolume @home
          mount:
            path: /mnt/home
            src: UUID={{ root_uuid.stdout }}
            opts: noatime,compress=lzo,space_cache,ssd,subvol=@home
            fstype: btrfs
            state: mounted
        - name: Mount BTRFS subvolume @pkg
          mount:
            path: /mnt/var/cache/pacman/pkg
            src: UUID={{ root_uuid.stdout }}
            opts: noatime,compress=lzo,space_cache,ssd,subvol=@pkg
            fstype: btrfs
            state: mounted
        - name: Mount BTRFS subvolume @snapshots
          mount:
            path: /mnt/.snapshots
            src: UUID={{ root_uuid.stdout }}
            opts: noatime,compress=lzo,space_cache,ssd,subvol=@snapshots
            fstype: btrfs
            state: mounted
        - name: Mount BTRFS subvolume 5
          mount:
            path: /mnt/btrfs
            src: UUID={{ root_uuid.stdout }}
            opts: noatime,compress=lzo,space_cache,ssd,subvolid=5
            fstype: btrfs
            state: mounted
      tags:
        - mount_filesystems

    ### Rank Arch mirrors
    - name: Rank Arch mirrors
      block:
        - name: Install the pacman-contrib package (for rankmirrors)
          pacman:
            name:
              - pacman-contrib
            update_cache: yes
        - name: Use rankmirrors to filter the fastest mirrors that support HTTPS
          shell: curl -s "https://archlinux.org/mirrorlist/?country=DE&protocol=https&use_mirror_status=on" | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 5 - > /etc/pacman.d/mirrorlist
      tags:
        - mirrors

    ### Run pacstrap
    - name: Run pacstrap
      command: pacstrap /mnt base base-devel
      tags:
        - pacstrap

      ### Install wanted packages via pacman
    - name: Install kernel packages
      command: arch-chroot /mnt pacman -S linux linux-firmware mkinitcpio --noconfirm
      tags:
        - software

    - name: Install graphics & gui packages
      command: arch-chroot /mnt pacman -S xorg-server nvidia lightdm lightdm-gtk-greeter i3-gaps i3status i3lock i3lock dmenu --noconfirm
      tags:
        - software

    - name: Install sound and bluetooth packages
      command: arch-chroot /mnt pacman -S pulseaudio pulseaudio-alsa pulseaudio-bluetooth pavucontrol bluez bluez-utils --noconfirm
      tags:
        - software

    - name: Install wifi packages
      command: arch-chroot /mnt pacman -S wpa_supplicant iw wavemon --noconfirm
      tags:
        - software

    - name: Install filesystem packages
      command: arch-chroot /mnt pacman -S btrfs-progs exfatprogs dosfstools ntfs-3g --noconfirm
      tags:
        - software

    - name: Install system & tool packages
      command: arch-chroot /mnt pacman -S ntp cronie reflector htop dnsutils mtr screenfetch terminus-font openssh bash-completion terminator git python mc pcmanfm feh gnome-screenshot --noconfirm
      tags:
        - software

    - name: Install communication packages
      command: arch-chroot /mnt pacman -S ntp firefox firefox-i18n-de thunderbird thunderbird-i18n-de discord --noconfirm
      tags:
        - software

    - name: Install security packages
      command: arch-chroot /mnt pacman -S keepassxc nmap firejail --noconfirm
      tags:
        - software

    - name: Install editor packages
      command: arch-chroot /mnt pacman -S nano vim leafpad mupdf texlive-core --noconfirm
      tags:
        - software

    - name: Install vm & container packages
      command: arch-chroot /mnt pacman -S nano qemu virt-manager docker docker-compose  --noconfirm
      tags:
        - software

    ### Generate fstab
    - name: Generate fstab
      shell: genfstab -U /mnt >> /mnt/etc/fstab
      tags:
        - fstab

    ### Set local timezone
    - name: Set local timezone
      command: arch-chroot /mnt ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime
      tags:
        - timezone

    ### Generate adjtime file
    - name: Generate adjtime file
      command: arch-chroot /mnt hwclock --systohc
      tags:
        - adjtime

    ### Setup locales
    - name: Setup locales
      block:
        - name: Configure locale.gen
          lineinfile:
            dest: /mnt/etc/locale.gen
            regexp: "{{ item.regex }}"
            line: "{{ item.line }}"
          loop:
            - { regex: de_DE\.UTF-8 UTF-8, line: de_DE.UTF-8 UTF-8 }
            - { regex: de_DE ISO-8859-1, line: de_DE ISO-8859-1 }
        - name: Create locale.conf
          copy:
            content: "LANG=de_DE.UTF-8"
            dest: /mnt/etc/locale.conf
        - name: Generate locales
          command: arch-chroot /mnt locale-gen
      tags:
        - locales

    - name: Set hostname
      copy:
        content: "{{ inventory_hostname }}"
        dest: /mnt/etc/hostname
      tags:
        - hostname

    - name: Setup systemd-networkd
      block:
        - name: Create profile for wired connection
          copy:
            content: |
              [Match]
              Name={{ wired_interface }}
              [Network]
              DHCP=yes
              DNS={{ dns_server }}
              #[Link]
              #MTUBytes=1480
              # IPv6 traffic is tunneled over IPv4, which eats 20 bytes of the MTU.
            dest: /mnt/etc/systemd/network/20-wired.network
        - name: Create profile for wireless connection
          copy:
            content: |
              [Match]
              Name={{ wireless_interface }}
              [Network]
              DHCP=yes
              DNS={{ dns_server }}
              #[Link]
              #MTUBytes=1480
              # IPv6 traffic is tunneled over IPv4, which eats 20 bytes of the MTU.
            dest: /mnt/etc/systemd/network/21-wireless.network
      tags:
        - systemd-networkd

    - name: Set up initramfs
      block:
        - name: Add mkinitcpio.conf hooks
          lineinfile:
            dest: /mnt/etc/mkinitcpio.conf
            regexp: ^HOOKS=
            line: HOOKS=(base udev autodetect keyboard keymap modconf block encrypt btrfs filesystems)
        - name: Create new initramfs
          command: arch-chroot /mnt mkinitcpio -p linux
      tags:
        - initramfs
        - mkinitcpio

    - name: Set up systemd-boot bootloader
      block:
        - name: Install systemd-boot
          command: arch-chroot /mnt bootctl --path=boot install
        - name: Remove old loader.conf
          file:
            path: /mnt/boot/loader/loader.conf
            state: absent
        - name: Touch new loader loader.conf
          file:
            path: /mnt/boot/loader/loader.conf
            state: touch
        - name: Update new loader.conf
          blockinfile:
            path: /mnt/boot/loader/loader.conf
            block: |
              default arch
              timeout 4
              editor 0
        - name: Touch loader entry file
          file:
            path: /mnt/boot/loader/entries/arch.conf
            state: touch
        - name: Create new loader entry
          blockinfile:
            path: /mnt/boot/loader/entries/arch.conf
            block: |
              title Arch Linux Btrfs
              linux /vmlinuz-linux
              initrd /initramfs-linux.img
              options cryptdevice=UUID={{ root_luks_uuid.stdout }}:root:allow-discards rd.luks.options=discard root=/dev/mapper/root rootflags=subvol=@ rw
      tags:
        - systemd-boot

    - name: Setup user account
      block:
        - name: Generate crypted password for user account
          shell: echo $(perl -e 'print crypt($ARGV[0], "password")' '{{ user_password }}')
          register: crypt_pw

        - name: Create user account
          command: arch-chroot /mnt useradd --create-home --user-group --groups wheel {{ user_name }} --password {{crypt_pw.stdout}}

        - name: Create default ssh keys
          command: arch-chroot /mnt runuser -l {{ user_name }} -c 'ssh-keygen -q -t rsa -N "" -C noname -f ~/.ssh/id_rsa <<<y 2>&1 >/dev/null'

        - name: get authorized key from github and save in root account
          authorized_key:
            user: root
            state: present
            key: "{{ github_public_key }}"
            validate_certs: False

        - name: copy authorized key from root account to new user account
          copy:
            src: ~/.ssh/authorized_keys
            dest: /mnt/home/{{ user_name }}/.ssh/authorized_keys
            remote_src: yes
            owner: "1000"
            group: "1000"
            mode: 0644
      tags:
        - user_account

    - name: Give sudo access to wheel group
      copy:
        content: "%wheel ALL=(ALL) ALL"
        dest: /mnt/etc/sudoers.d/wheel
        validate: /usr/sbin/visudo --check --file=%s
      tags:
        - sudo

    - name: Enable Services
      block:
        - name: Enable sshd
          command: arch-chroot /mnt systemctl enable sshd
        - name: Enable libvirtd
          command: arch-chroot /mnt systemctl enable systemd-networkd
        - name: Enable systemd-networkd
          command: arch-chroot /mnt systemctl enable systemd-networkd
        - name: Enable systemd-resolved
          command: arch-chroot /mnt systemctl enable systemd-resolved
        #- name: Enable bluetooth.service
        #  command: arch-chroot /mnt systemctl enable bluetooth.service
        - name: Enable ntpd
          command: arch-chroot /mnt systemctl enable ntpd
        - name: Enable lightdm
          command: arch-chroot /mnt systemctl enable lightdm
        - name: Enable cronie
          command: arch-chroot /mnt systemctl enable cronie
        - name: Enable btrfs-scrub@btrfs.timer
          command: arch-chroot /mnt systemctl enable btrfs-scrub@btrfs.timer
        - name: Enable btrfs-scrub@btrfs.service
          command: arch-chroot /mnt systemctl enable btrfs-scrub@btrfs.service
      tags:
        - enable_services
    - name: Reboot
      reboot:
        connect_timeout: 1
        reboot_timeout: 1
      failed_when: false
      tags:
        - reboot
